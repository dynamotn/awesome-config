-- Widget library
local wibox = require("wibox")
-- Custom library
local dwidget = require("dynamo.widget")

-- { Create powerline section with separator, child widget, internal textbox and fill color
-- @param number index Index of section, used for autogenerated color
-- @param string/table Icon path of section's widget or awesomeWM widget
-- @param string color_current Hexa or name color of this section
-- @param string color_next Hexa or name color of next section (left-to-right for index > 0, unless is right-to-left)
-- @return table Table with information of section
local function create(index, widget, color_current, color_next)
  local section = {
    layout = wibox.layout.fixed.horizontal,
  }

  local direction
  if index > 0 then
    direction = "right"
  else
    direction = "left"
  end
  local section_separator = dwidget.separator("arrow", direction, "solid", color_current, color_next)

  if type(widget) ~= "table" then
    widget = wibox.widget.imagebox(widget)
  end
  local section_widget = wibox.container.background(widget, color_current)
  local section_text = wibox.widget.textbox()
  local section_textbar = wibox.container.background(section_text, color_current)

  function section:text()
    return section_text
  end

  -- NOTE: Avoid 'buttons' name because has error when add it on declarative style of panel
  function section:set_buttons(_buttons)
    section_widget:buttons(_buttons)
    section_textbar:buttons(_buttons)
  end

  -- NOTE: Avoid 'buttons' name because has error when add it on declarative style of panel
  function section:set_signal(signal, execute)
    section_widget:connect_signal(signal, execute)
    section_textbar:connect_signal(signal, execute)
  end

  if index > 0 then
    table.insert(section, section_widget)
    table.insert(section, section_textbar)
    table.insert(section, section_separator)
  else
    table.insert(section, section_separator)
    table.insert(section, section_widget)
    table.insert(section, section_textbar)
  end
  return section
end
-- }

return setmetatable({}, { __call = function(_, ...) return create(...) end })
